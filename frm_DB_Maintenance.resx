<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>